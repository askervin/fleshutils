#!/usr/bin/env python3
#
# Copyright (c) 2022 Antti Kervinen <antti.kervinen@gmail.com>
#
# License (MIT):
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""igo - interactive go command line

Usage: igo
"""

import copy
import os
import shlex
import shutil
import subprocess
import sys
import tempfile

igo_help="""interactive go commands:
  :a ARGS                set command line arguments.
  :c                     clear current code and command line arguments.
  :c all                 clear all, including undo buffer, start from scratch.
  :doc IDENTIFIER        print doc, example: doc fmt.Printf.
  :src IDENTIFIER        print source code of IDENTIFIER (should be a func).
  :disasm                disassemble main.
  :disasm opt            disassemble optimized main.
  :i                     info.
  :l                     list go code.
  :ln                    list go code with line numbers.
  :lraw                  list raw code (no gofmt, goimports).
  :p EXPR[,EXPR...]      run code and print EXPR(s) at the end of main.
  :p%FMT EXPR[,EXPR...]  same as p, use fmt.Printf("%FMT...") for printing.
  :r                     run code.
  :s FILE                save (export) go code to FILE.
  :sigo FILE             save igo session (including undo buffers) to FILE.
  :ligo FILE             load igo session from FILE.
  :u                     undo last code change.
  :ub                    list undo buffers as go code.
  import ...            add an import.
  CODE                  add CODE into main or func.
"""

def warning(msg):
    sys.stderr.write("WARNING: %s\n" % (msg,))

def require_executable(*basename_bins):
    for basename_bin in basename_bins:
        path_bin = shutil.which(basename_bin)
        if path_bin is not None:
            return path_bin
    warning("executable missing: %s" % (" or ".join(basename_bins),))

go_bin = require_executable("go")
gofmt_bin = require_executable("gofmt")
goimports_bin = require_executable("goimports")
guru_bin = require_executable("golang-guru", "guru")

opt_debug = 0
opt_tempdir = tempfile.TemporaryDirectory(prefix="igo-")
opt_output = opt_tempdir.name + "/code.go"

template = """
package main

import (
        %(import)s
)

func main() {
        %(main)s
}
"""

def readcmd(mode):
    try:
        line = input("igo> ")
    except:
        return None
    return line.rstrip()

def output(s):
    sys.stdout.write(s)

def instantiate(template, usergo):
    usergo_strings = {}
    for key in usergo:
        usergo_strings[key] = "\n".join(usergo[key])
    return template % usergo_strings

def outerr(cmd, str_stdin=""):
    if opt_debug:
        output("DEBUG: launch %r\n" % (cmd,))
    try:
        p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except Exception as e:
        if opt_debug:
            output("DEBUG: run exeption: %s" % (e,))
        return "", "cannot run " + str(cmd)+ ": " + str(e)
    p.stdin.write(str_stdin.encode("utf8"))
    out, err = p.communicate()
    if opt_debug > 1:
        output("DEBUG: stdout: %r\n" % (out,))
        output("DEBUG: stderr: %r\n" % (err,))
    return out.decode("utf8"), err.decode("utf8")

def save(code):
    open(opt_output, "w").write(code)
    gofmt_out, gofmt_err = outerr([gofmt_bin, opt_output])
    if gofmt_err.strip():
        output("gofmt: " + format_err(gofmt_err) + "\n")
        return gofmt_err
    open(opt_output, "w").write(gofmt_out)
    goimports_out, goimports_err = outerr([goimports_bin, opt_output])
    if goimports_err.strip():
        output("goimports: " + format_err(gofmt_err) + "\n")
        return goimports_err
    open(opt_output, "w").write(goimports_out)
    return None

def format_err(err):
    for l in err.splitlines():
        if l.startswith(opt_output + ":"):
            if l.count(":") >= 3: # filename:line:col: ...
                filename, line, col, tail = l.split(":", 3)
                return "line %s: %s" % (line.strip(), tail.strip())
    return err

def run(code, user_args=[]):
    err = save(code)
    if err is not None:
        return err
    out, err = outerr([go_bin, "run", opt_output] + user_args)
    output(out)
    if err.strip():
        output("go run: " + format_err(err) + "\n")

def disasm(code, optimize=False):
    err = save(code)
    if err is not None:
        return err
    binfile = opt_tempdir.name + "/out"
    optimize_args = []
    if not optimize:
        optimize_args = ["-gcflags", "all=-N -l"]
    out, err = outerr(["go", "build", "-o", binfile] + optimize_args + [opt_output])
    if err.strip():
        output("go build: " + format_err(err) + "\n")
    out, err = outerr(["go", "tool", "objdump", "-S", "-s", "main.main", binfile])
    if err.strip():
        output(err)
    output(out)

def goguru_definition(show_src=False):
    if opt_debug > 1:
        output("goguru definition from:\n" + code_with_linenos())
    filelen=len(open(opt_output).read())
    out, err = outerr([guru_bin, "definition", opt_output + ":#" + str(filelen - 4)])
    if err.strip():
        output(err + "\n")
        return
    for l in out.splitlines():
        if l.startswith(opt_output):
            output(l.split(":",2)[2:])
        elif l.count(":") >= 3:
            # try to find godoc from the source file
            srcfile, lineno, rest = l.split(":", 2)
            try:
                all_lines = open(srcfile).readlines()
                invlines = all_lines[:int(lineno)][::-1]
                srclines_and_more = all_lines[int(lineno):]
            except Exception as e:
                output("could not open source file %r from guru line %r\n" % (srcfile, l))
            invdoc = []
            for n, l in enumerate(invlines):
                if l.strip().startswith("//") or n == 0:
                    invdoc.append(l)
                else:
                    break
            output("%s:%s:\n" % (srcfile, lineno))
            output("".join(invdoc[1:][::-1] + [invdoc[0]]))
            if show_src:
                for line in srclines_and_more:
                    output(line)
                    if line.startswith("}"):
                        break

def code_with_linenos():
    return "\n".join("%s\t%s" % (index+1, line) for index, line in enumerate(open(opt_output).read().splitlines())) + "\n"

def count_top_level(string, sym):
    """return number of sym in string so that sym is not in any parethesis"""
    paren_open="([{"
    paren_close=")]}"
    nested_parens = 0
    top_sym_count = 0
    for char in string:
        if char in paren_open:
            nested_parens += 1
        elif char in paren_close:
            nested_parens -= 1
        elif char == sym and nested_parens == 0:
            top_sym_count += 1
    return top_sym_count

def main():
    global opt_debug
    # usergo: code lines from the user
    new_usergo = lambda: {
        "args": [],
        "import": [],
        "main": [],
    }
    usergo = new_usergo()
    usergos = [usergo]
    mode = "main"
    cmd = readcmd(mode)
    while cmd != "q" and cmd is not None:
        run_code = False
        push_code = False
        usergo = copy.deepcopy(usergos[-1])
        if cmd == "":
            pass
        elif cmd == "h" or cmd == "help":
            output(igo_help)
        elif cmd.startswith(":a "):
            usergo["args"]=shlex.split(cmd[3:])
            output("command line arguments: %s\n" % usergo["args"])
            push_code = True
        elif cmd == ":a":
            output("command line arguments: %s\n" % usergo["args"])
        elif cmd == ":c" or cmd == ":c all":
            usergo = {
                "args": [],
                "import": [],
                "main": [],
            }
            if cmd == ":c all":
                usergos = []
            push_code = True
        elif cmd == ":debug+":
            opt_debug += 1
        elif cmd == ":debug-":
            opt_debug -= 1
        elif cmd == ":debug":
            output("debug level: %d, use debug+ and debug- to adjust\n" % (opt_debug,))
        elif cmd == ":disasm": # disassembly
            disasm(instantiate(template, usergo), False)
        elif cmd == ":disasm opt": # disassembly, optimized
            disasm(instantiate(template, usergo), True)
        elif cmd.startswith(":disasm"):
            output(":disasm: disassmeble unoptimized\n")
            output(":disasm opt: disassemble optimized\n")
        elif cmd.startswith(":doc ") or cmd.startswith(":src "):
            identifier = cmd[5:]
            usergo["main"] = ["var _ = " + identifier]
            save(instantiate(template, usergo))
            goguru_definition(show_src=cmd.startswith(":src "))
        elif cmd == ":i": # info
            output("work go file: %r\n" % (opt_output,))
            output("igo history:  %d\n" % (len(usergos),))
            output("go: %r\n" % (go_bin,))
            output("goimports: %r\n" % (goimports_bin,))
            output("goguru: %r\n" % (guru_bin,))
            output("gofmt: %r\n" % (gofmt_bin,))
        elif cmd == ":l": # list
            save(instantiate(template, usergo))
            output(open(opt_output).read())
        elif cmd == ":ln": # list with line numbers
            save(instantiate(template, usergo))
            output(code_with_linenos())
        elif cmd == ":lraw": # list user code raw (no gofmt, no goimports)
            output(instantiate(template, usergo))
        elif cmd.startswith(":p ") or (cmd.startswith(":p%") and " " in cmd):
            if cmd.startswith(":p "):
                exprs = cmd[3:].strip()
                fmt = "%#v"
            else:
                fmt, exprs = cmd[2:].split(" ", 1)
            if exprs:
                expr_count = count_top_level(exprs, ",") + 1
                fmts = ((fmt + ", ") * expr_count)[:-2]
                usergo["main"].append('fmt.Printf("%s\\n", %s)' % (fmts, exprs))
                run_code = True
            else:
                output("nothing to print\n")
        elif cmd == ":r": # run
            run_code = True
        elif cmd.startswith(":s "): # save FILE
            filename = cmd[3:].strip()
            if filename:
                try:
                    open(filename,"w").write(open(opt_output).read())
                    output("saved to %r" % (filename,))
                except Exception as e:
                    output("save to %r failed: %s" % (filename, e))
            else:
                 output("Usage: :s SAVEFILE\n")
        elif cmd.startswith(":sigo "): # save igo codes to FILE
            filename = cmd[5:].strip()
            if filename:
                try:
                    open(filename,"w").write(repr(usergos))
                except Exception as e:
                    output("save to %r failed: %s" % (filename, e))
            else:
                 output("Usage: sigo SAVEFILE.igo\n")
        elif cmd.startswith(":ligo "): # load igo codes from FILE
            filename = cmd[5:].strip()
            if filename:
                try:
                    usergos = eval(open(filename).read())
                except Exception as e:
                    output("save to %r failed: %s" % (filename, e))
            else:
                 output("Usage: ligo LOADFILE.igo\n")
        elif cmd == ":u": # undo, pop from stack
            if len(usergos) > 1:
                usergos.pop()
        elif cmd == ":ub": # list undo buffer
            for n, usergo in enumerate(usergos):
                save(instantiate(template, usergo))
                output("=== code %d ===\n%s\n" %
                       (n, code_with_linenos()))
        elif cmd.startswith("import "):
            usergo["import"].append(cmd.split(" ", 1)[1])
            push_code = True
        elif mode.startswith("main"):
            usergo["main"].append(cmd)
            run_code = True
            push_code = True
        if mode == "main" and run_code:
            run(instantiate(template, usergo), usergo["args"])
        if push_code:
            usergos.append(usergo)
        cmd = readcmd(mode)

if __name__ == "__main__":
    main()
