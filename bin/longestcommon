#!/usr/bin/env python3
#
# Copyright (c) 2022 Antti Kervinen <antti.kervinen@gmail.com>
#
# License (MIT):
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""longestcommon - operations on longest common prefix/suffix

Usage: longestcommon [options]

Options:
  -h, --help              print help.
  -P, --prefix            operate longest common prefix.
  -S, --suffix            operate longest common suffix.
  -c, --column COLUMN     modify strings only in COLUMNth column(s).
  -f FORMAT               reformat operated line/column, use formatting:
                           - %(prefix)s
                           - %(mid)s
                           - %(suffix)s
                           - %(orig)s
"""

import getopt
import sys

def error(msg, exit_status=1):
    """print error message and exit"""
    if msg:
        sys.stderr.write("%s: %s\n" % (g_command, msg))
    if exit_status != None:
        sys.exit(1)

def output(msg):
    try:
        sys.stdout.write(msg)
    except:
        pass

def longest_common_prefix(strings):
    lcp = None
    for s in strings:
        if lcp is None:
            lcp = s
            continue
        new_lcp_len = 0
        while new_lcp_len < len(lcp) and new_lcp_len < len(s):
            if lcp[new_lcp_len] == s[new_lcp_len]:
                new_lcp_len += 1
            else:
                break
        lcp = lcp[:new_lcp_len]
    return lcp

def longest_common_suffix(strings):
    mirror = longest_common_prefix([s[::-1] for s in strings])
    return mirror[::-1]

def format_string(fmt, format_d={}):
    return fmt % format_d

def longest_common(strings):
    """returns longest common prefix and suffix"""
    if opt_prefix:
        lcp = longest_common_prefix(strings)
    else:
        lcp = ""
    if opt_suffix:
        lcs = longest_common_suffix(strings)
    else:
        lcs = ""
    return lcp, lcs

def operate_lines(input_fileobj):
    lines = input_fileobj.readlines()
    if opt_columns:
        lines = [[c.strip() for c in l.split()] for l in lines]
        operated_cols = [[] for _ in range(len(lines))]
        for col in range(len(lines[0])):
            if col + 1 not in opt_columns:
                for i, line in enumerate(lines):
                    operated_cols[i].append(line[col])
            else:
                lcp, lcs = longest_common([l[col] for l in lines])
                for i, line in enumerate(lines):
                    last_char = len(line[col]) - len(lcs)
                    operated_cols[i].append(
                        format_string(opt_format,
                                      format_d={'prefix': lcp,
                                                'suffix': lcs,
                                                'mid': line[col][:last_char][len(lcp):],
                                                'orig': line[col]}))

        operated_lines = [" ".join(cols) for cols in operated_cols]
    else:
        lines = [l.rstrip() for l in lines if l.strip()]
        lcp, lcs = longest_common(lines)
        operated_lines = []
        for line in lines:
            last_char = len(line) - len(lcs)
            operated_lines.append(
                format_string(opt_format,
                              format_d={'prefix': lcp,
                                        'suffix': lcs,
                                        'mid': line[len(lcp):][:-len(lcs)],
                                        'orig': line}))
    output("\n".join(operated_lines) + "\n")

if __name__ == "__main__":
    opt_prefix = False
    opt_suffix = False
    opt_columns = []
    opt_format = "%(mid)s"

    try:
        opts, remainder = getopt.gnu_getopt(
            sys.argv[1:], 'hc:PSf:',
            ['help', 'column=', 'prefix', 'suffix', 'format='])
    except Exception as e:
        error(e)

    for opt, arg in opts:
        if opt in ["-h", "--help"]:
            print(__doc__)
            sys.exit(0)
        elif opt in ["-c", "--column"]:
            try:
                opt_columns.append(int(arg))
            except:
                error('invalid column number %r' % (arg,))
        elif opt in ["-P", "--prefix"]:
            opt_prefix = True
        elif opt in ["-S", "--suffix"]:
            opt_suffix = True
        elif opt in ["-f", "--format"]:
            opt_format = arg

    if remainder:
        for input_filename in remainder:
            input_fileobj = open(input_filename)
            operate_lines(input_fileobj)
    else:
        operate_lines(sys.stdin)
