#!/usr/bin/env python3
#
# Copyright (c) 2024 Antti Kervinen <antti.kervinen@gmail.com>
#
# License (MIT):
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

r"""pollfiles - keep printing data from selected files and lines

Usage: pollfiles [options] [FILE...]

If FILEs are not given, they are read from the standard input.

Options:
  -h, --help              print help.
  -f, --format FORMAT     output FORMAT, "csv", "json" or "metrics".
                          The default is FORMAT:
                          "%(time).3f %(file)s %(label)s %(value)s\n".
  --file-labels           expect LABEL=FILENAMEs instead of FILEs.
  -l, --lines REGEXP      print all lines matching REGEXP.
  -s, --search [LABEL]=REGEXP print data from lines matching REGEXP.
  -t INTERVAL             poll time interval in seconds. The default is 1.0.
  -d, --debug             print debug info.
  -o, --output OUTFILE    write output to OUTFILE, the default is stdout.

Examples:
  # print CPU user time with 100 ms interval from top-level cgroups
  pollfiles -t 0.1 \
            -s utime='user_usec ([0-9]+)' \
            -s stime='system_usec ([0-9]+)' \
            /sys/fs/cgroup/*/cpu.stat
"""

import getopt
import json
import os
import re
import sys
import time
import urllib.request

g_command = "pollfiles"
opt_format = "%(time).3f %(file)s %(label)s %(value)s\n"
output_json = []

def error(msg, exit_status=1):
    """print error message and exit"""
    if msg:
        sys.stderr.write("%s: %s\n" % (g_command, msg))
    if exit_status != None:
        sys.exit(1)

def debug(msg):
    if opt_debug:
        t = time.time()
        sys.stderr.write("%s: DEBUG %.3f: %s\n" % (g_command, t, msg))
        sys.stderr.flush()

def output(msg):
    opt_output.write(msg)

_csv_header_printed = False
def output_data(datadict):
    global _csv_header_printed
    if opt_format == "metrics":
        value = datadict.get("value", "N/A")
        del datadict["value"]
        output("%s %s\n" % (json.dumps(datadict), value))
    elif opt_format == "json":
        output(json.dumps(datadict) + "\n")
    elif opt_format == "csv":
        if not _csv_header_printed:
            output(";".join(sorted(datadict)) + "\n")
            _csv_header_printed = True
        output(";".join([str(datadict[k]) for k in sorted(datadict)]) + "\n")
    else:
        output(opt_format % datadict)

def read_file(filename):
    if filename.startswith("http://"):
        try:
            data = urllib.request.urlopen(filename).read()
        except Exception as e:
            debug("reading '%s' failed: %s" % (filename, e))
            return None
    else:
        try:
            data = open(filename).read()
        except Exception as e:
            debug("reading '%s' failed: %s" % (filename, e))
            return None
    debug("read from '%s' (%s bytes)" % (filename, len(data)))
    if isinstance(data, bytes):
        data = data.decode("utf8")
    return data

def output_file(filename, filelabel, polldata):
    t = time.time()
    filedata = read_file(filename)
    if not filedata:
        return
    for label, regexp in polldata.get("search", []):
        for value in regexp.findall(filedata):
            output_data({"time": t, "file": filelabel, "label": label, "value": value})
    for label, regexp in polldata.get("lines", []):
        for line in filedata.splitlines():
            if regexp.match(line):
                output_data({"time": t, "file": filelabel, "label": label, "value": line})

def parse_search_arg(polldata, arg):
    if not "=" in arg:
        error("missing = from %r, expected --search LABEL=REGEXP" % (arg,))
    label, regexp_text = arg.split("=", 1)
    try:
        regexp = re.compile(regexp_text)
    except Exception as e:
        error("invalid REGEXP %r: %s" % (regexp_text, e))
    polldata["search"].append((label, regexp))

if __name__ == "__main__":
    opt_files = []
    opt_file_labels = False
    opt_output = sys.stdout
    opt_t = 1.0
    opt_debug = False
    polldata = {"search": [], "lines": []}
    file_labels = {}
    filenames = []

    try:
        opts, remainder = getopt.gnu_getopt(
            sys.argv[1:], 'hf:l:s:t:o:',
            ['help', 'format=', 'file-labels', 'lines=', 'search=', 'output=', 'debug'])
    except Exception as e:
        error(e)

    for opt, arg in opts:
        if opt in ["-h", "--help"]:
            print(__doc__)
            sys.exit(0)
        elif opt in ["-f", "--format"]:
            opt_format = arg
        elif opt in ["-l", "--lines"]:
            try:
                polldata["lines"].append(("line", re.compile(arg)))
            except Exception as e:
                error("invalid --lines=REGEXP: '%s' (%s)" % (arg, e))
        elif opt in ["-s", "--search"]:
            parse_search_arg(polldata, arg)
        elif opt in ["--file-labels"]:
            opt_file_labels = True
        elif opt in ["-o", "--output"]:
            try:
                opt_output = open(arg, "w")
            except Exception as e:
                error("failed to open --output='%s': %s" % (arg, e))
        elif opt in ["-t"]:
            try:
                opt_t = float(arg)
            except Exception:
                error("invalid -t INTERVAL %r, expected float" % (arg,))
        elif opt in ["--debug"]:
            opt_debug = True
        else:
            error("internal error, unhandled opt=arg: %s=%s" % (opt, arg))

    if not polldata["search"] and not polldata["lines"]:
        polldata["lines"].append(("", re.compile(".")))

    if remainder:
        opt_files = remainder
    else:
        opt_files = sys.stdin.read().splitlines()

    for label_filename in opt_files:
        label_filename = label_filename.strip()
        if not label_filename:
            continue
        if opt_file_labels:
            try:
                label, filename = label_filename.strip().split("=", 1)
            except:
                error("missing LABEL from LABEL=FILE: '%s'" % (label_filename,))
        else:
            filename = label_filename
            label = label_filename
        debug("start polling file '%s' (label '%s')" % (filename, label))
        filenames.append(filename)
        file_labels[filename] = label

    if not filenames:
        error("missing FILEs")

    last_t = time.time()
    while True:
        for filename in filenames:
            output_file(filename, file_labels[filename], polldata)
        now_t = time.time()
        diff_t = now_t - last_t
        if diff_t < opt_t:
            time.sleep(opt_t - diff_t)
            last_t = last_t + opt_t
        else:
            last_t = now_t
