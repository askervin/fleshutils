#!/usr/bin/env python3
#
# Copyright (c) 2024 Antti Kervinen <antti.kervinen@gmail.com>
#
# License (MIT):
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

r"""pollfiles - keep printing data from selected files and lines

Usage: pollfiles [options] [FILE...]

If FILEs are not given, they are read from the standard input.

Options:
  -h, --help              print help.
  -f, --format FORMAT     output FORMAT, "csv", "json" or "metrics".
                          The default is FORMAT:
                          "%(time).3f %(file)s %(label)s %(value)s\n".
  -s, --search [LABEL]=REGEXP print data from lines matching REGEXP
  -t INTERVAL             poll time interval in seconds. The default is 1.0.

Examples:
  # print CPU user time with 100 ms interval from top-level cgroups
  pollfiles -t 0.1 \
            -s utime='user_usec ([0-9]+)' \
            -s stime='system_usec ([0-9]+)' \
            /sys/fs/cgroup/*/cpu.stat
"""

import getopt
import json
import os
import re
import sys
import time

g_command = "pollfiles"
opt_format = "%(time).3f %(file)s %(label)s %(value)s\n"
output_json = []

def error(msg, exit_status=1):
    """print error message and exit"""
    if msg:
        sys.stderr.write("%s: %s\n" % (g_command, msg))
    if exit_status != None:
        sys.exit(1)

def output(msg):
    sys.stdout.write(msg)

_csv_header_printed = False
def output_data(datadict):
    global _csv_header_printed
    if opt_format == "metrics":
        value = datadict.get("value", "N/A")
        del datadict["value"]
        output("%s %s\n" % (json.dumps(datadict), value))
    elif opt_format == "json":
        output(json.dumps(datadict) + "\n")
    elif opt_format == "csv":
        if not _csv_header_printed:
            output(";".join(sorted(datadict)) + "\n")
            _csv_header_printed = True
        output(";".join([str(datadict[k]) for k in sorted(datadict)]) + "\n")
    else:
        output(opt_format % datadict)

def output_file(filename, polldata):
    t = time.time()
    try:
        filedata = open(filename).read()
    except:
        return
    for label, regexp in polldata.get("search", []):
        for value in regexp.findall(filedata):
            output_data({"time": t, "file": filename, "label": label, "value": value})

if __name__ == "__main__":
    opt_files = []
    opt_t = 1.0
    polldata = {"search": []}

    try:
        opts, remainder = getopt.gnu_getopt(
            sys.argv[1:], 'hf:s:t:',
            ['help', 'format=', 'search=',])
    except Exception as e:
        error(e)

    for opt, arg in opts:
        if opt in ["-h", "--help"]:
            print(__doc__)
            sys.exit(0)
        elif opt in ["-f", "--format"]:
            opt_format = arg
        elif opt in ["-s", "--search"]:
            if not "=" in arg:
                error("missing = from %r, expected --search LABEL=REGEXP" % (arg,))
            label, regexp_text = arg.split("=", 1)
            try:
                regexp = re.compile(regexp_text)
            except Exception as e:
                error("invalid REGEXP %r: %s" % (regexp_text, e))
            polldata["search"].append((label, regexp))
        elif opt in ["-t"]:
            try:
                opt_t = float(arg)
            except Exception:
                error("invalid -t INTERVAL %r, expected float" % (arg,))
        else:
            error("internal error, unhandled opt=arg: %s=%s" % (opt, arg))

    if not polldata["search"]:
        error("missing --search LABEL=REGEXP, nothing to print")

    if remainder:
        opt_files = remainder
    else:
        opt_files = sys.stdin.read().splitlines()

    if not opt_files:
        error("missing FILEs")

    last_t = time.time()
    while True:
        for filename in opt_files:
            output_file(filename, polldata)
        now_t = time.time()
        diff_t = now_t - last_t
        if diff_t < opt_t:
            time.sleep(opt_t - diff_t)
            last_t = last_t + opt_t
        else:
            last_t = now_t
