#!/usr/bin/env python3
#
# Copyright (c) 2024 Antti Kervinen <antti.kervinen@gmail.com>
#
# License (MIT):
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""visualsets - visualise sets in terminal

Usage: visualsets [options] [FILE[>|CMD]...]

Options:
  -h, --help              print help.
  -c, --column COL        visualize only column COL from input
  -s, --silent            ignore parse errors
  -l, --list [LABEL=]SET  visualise set in list format, optionally with LABEL
  -m, --mask [LABEL=]SET  visualise set in mask format, optionally with LABEL
  -p, --parser PARSER     use PARSER ("list" or "mask") to parse data in FILEs
  -r, --raw               print raw contents next to labels
  -g, --group             group and print files/labels based on sets contents
  --group-one             like --group but print only one file/label per group
  --group-zero            like --group but print no files/labels, only contents
  -i, --ignore-empty      silently skip empty files and sets
  --short                 print label and visualisation on the same line
  -U, --union             visualise union of all sets at the end
  -I, --intersection      visualise intersection of all sets at the end
  -D, --difference        substract remaining sets from the first set
  -C, --count=N           visualise elements that appeared at least in N sets

Examples:
  visualsets --list all=0-127 /sys/devices/system/node/node*/cpulist

  If a filename contains ">|" original file contents will be piped to
  the shell command after ">|", and output of that command will be handled
  as the set description. For example, select Cpus_allowed_list from
  each /proc/PID/status:

  for pid in $(pgrep python3); do
    visualsets "/proc/$pid/status>|awk '/Cpus_allowed_list/{print \$2}'"
  done
"""

import re

# coord2brbit maps (x, y) coordinates to offset bits in utf8/braille
# defined for width x height: 2 x 4
coord2brbit = [
    [0, 1, 2, 6],
    [3, 4, 5, 7],
]

# bits2listset returns the list representation of a set
def bits2listset(bits):
    n = 0
    range_start, range_end = -1, -1
    ranges = []
    while bits > 0:
        if bits & 1:
            range_end = n
            if range_start < 0:
                range_start = n
        if bits & 1 == 0 or (bits >> 1) == 0:
            if range_start >= 0:
                if range_start == range_end:
                    ranges.append("%d" % (range_start,))
                else:
                    ranges.append("%d-%d" % (range_start, range_end))
            range_start = -1
        n += 1
        bits >>= 1
    return ",".join(ranges)

# listset2bits parses list set syntax (like "0,4-7,63") into bitvector in int
def listset2bits(s):
    if s == "":
        return 0
    bits = 0
    for comma in s.split(","):
        rng = comma.split("-")
        if len(rng) == 1:
            bits += 1 << int(rng[0])
            continue
        for i in range(int(rng[0]), int(rng[1])+1):
            bits += 1 << i
    return bits

# maskset2bits parses mask set syntax (like "00ff00") into bitvector int
def maskset2bits(s):
    if s == "":
        return 0
    return int(s.replace(",", ""), 16)

# bits2bitmap renders bitvector int into bitmap dictionary that maps
# bitmap[(x, y)] = 1 for every (x, y) with corresponding bit set.
def bits2bitmap(bits, height=0):
    bitmap={}
    b = bits
    x, y = 0, 0
    while b > 0:
        if b & 1 == 1:
            bitmap[(x, y)] = 1
        b >>= 1
        y += 1
        if y >= height:
            y = 0
            x += 1
    return bitmap

# bitmap2braille converts a bitmap into a string of braille characters.
# If the bitmap height > 4 the result will be a multiline string.
def bitmap2braille(bitmap):
    braille = []
    max_y = max(y for x, y in bitmap)
    max_x = max(x for x, y in bitmap)
    for row in range((max_y + 4) // 4):
        braille.append([])
    for x2 in range(1 + max_x//2):
        for y4 in range(1 + max_y//4):
            braille_char_bits = 0
            for x in range(2):
                for y in range(4):
                    if ((x2*2+x), (y4*4+y)) in bitmap:
                        braille_char_bits |= 1 << coord2brbit[x][y]
            braille[y4].append(brbits2chr(braille_char_bits))
    return '\n'.join(''.join(c for c in line) for line in braille)

# brbits2chr converts braille character bits to a braille character
def brbits2chr(bits):
    base = 10240
    offset = 0
    for bit in range(8):
        if bits & (1 << bit) != 0:
            offset += 1 << bit
    return chr(base + offset)

# autodetect_parser guesses from data if it should be parsed as a list
# (preferred) or a mask format.
def autodetect_parser(data):
    data2bits = listset2bits
    data = data.strip()
    if len(data) == 0:
        return data2bits
    if data.startswith("0x"):
        data = data[2:]
        data2bits = maskset2bits
    if ((sum(data.count(c) for c in "abcdefABCDEF") > 0) or
        (len(data) > 1 and data[0] == "0" and data[1] in "0123456789")):
        data2bits = maskset2bits
    return data2bits

# error prints error message and exits process
def error(msg, exit_status=1):
    sys.stderr.write("visualsets: %s\n" % (msg,))
    sys.exit(exit_status)

# output prints a string
def output(s):
    sys.stdout.write(s)
    sys.stdout.flush()

# output_set parses a set from data and writes it into output
def output_set(data, label=None, parser=None, raw=False, mode="files", short=False, ignore_empty=False, silent=False):
    if (data == "" or data == 0) and ignore_empty:
        return
    out_label = ""
    if label:
        out_label = opt_label_fmt % (label,)
    if raw:
        if isinstance(data, str):
            out_label = out_label.replace("\n", " " + data.strip() + "\n")
        else:
            out_label = out_label.replace("\n", " " + bits2listset(data) + "\n")
    if short and "\n" in out_label:
        out_label = out_label.replace("\n", " ")
    if isinstance(data, str):
        if parser is None:
            parser = autodetect_parser(data)
        try:
            bits = parser(data)
        except Exception as e:
            if silent:
                return
            error("error parsing \"%s\": %s)" % (data, e))
    else:
        bits = data
    if bits > 0:
        visualset = bitmap2braille(bits2bitmap(bits, height=opt_height))
    else:
        visualset = ""
    all_output.append((out_label, bits, visualset))
    if mode == "files":
        output(out_label + visualset + "\n")
    elif mode == "group":
        key = (bits, visualset)
        if not key in visuals2files:
            visuals2files[key] = []
        visuals2files[key].append(out_label)
    elif mode == "column":
        output(visualset)

# output_group prints what has been already output in group format
def output_group(files=-1):
    for key in sorted(visuals2files):
        for n, label in enumerate(sorted(visuals2files[key])):
            if files >= 0 and n >= files:
                break
            output(label)
        output(key[1] + "\n")

def output_operation(operation, **passthrough_opts):
    global all_output
    if len(all_output) == 0:
        return
    if operation == "union":
        data = 0
        for _, bits, _ in all_output:
            data |= bits
        output_set(data, label="union of %d sets" % (len(all_output),), **passthrough_opts)
    elif operation == "intersection":
        data = all_output[0][1]
        for _, bits, _ in all_output[1:]:
            data &= bits
        output_set(data, label="intersection of %d sets" % (len(all_output),), **passthrough_opts)
    elif operation == "difference":
        data = all_output[0][1]
        for _, bits, _ in all_output[1:]:
            data -= (data & bits)
        output_set(data, label="difference of %d sets" % (len(all_output),), **passthrough_opts)
    elif operation[0] == "count":
        maxbits = max([bits for _, bits, _ in all_output])
        bit_count = {}
        bit = 1
        while bit < maxbits:
            count = 0
            for _, bits, _ in all_output:
                if bits & bit != 0:
                    count += 1
            bit_count[bit] = count
            bit <<= 1
        data = 0
        for bit, count in bit_count.items():
            if count >= operation[1]:
                data |= bit
        output_set(data, label="elements in at least %d sets" % (operation[1],), **passthrough_opts)
    else:
        error("unknown operation: %s" % (operation,))
    all_output = all_output[:-1] # do not count latest operation output in later operations

# main program
if __name__ == "__main__":
    import subprocess
    import sys
    import getopt
    opt_height = 4
    opt_label_fmt = "%s:\n"
    opt_parser = None
    opt_operations = []
    opt_column = None
    opts_output = {}
    opts_group = {}
    visuals2files = {}
    all_output = []
    try:
        opts, remainder = getopt.gnu_getopt(
            sys.argv[1:], 'hc:sy:l:m:p:rgiUIDC:',
            ['help', 'height=', 'list=', 'mask=', 'parser=', 'column=', 'silent',
             'raw', 'group', 'group-one', 'group-zero', 'short', 'ignore-empty',
             'union', 'intersection', 'difference', 'count='])
    except Exception as e:
        error(str(e))
    for opt, arg in opts:
        if opt in ["-h", "--help"]:
            print(__doc__)
            sys.exit(0)
        elif opt in ["-c", "--column"]:
            opts_output["mode"] = "column"
            try:
                opt_column = int(arg)
            except Exception as e:
                error("invalid --column=%s: %s" % (arg, e))
        elif opt in ["-s", "--silent"]:
            opts_output["silent"] = True
        elif opt in ["-y", "--height"]:
            opt_height = int(arg)
        elif opt in ["-l", "--list"]:
            label = None
            if "=" in arg:
                label, arg = arg.split("=", 1)
            output_set(arg, label=label, parser=listset2bits, **opts_output)
        elif opt in ["-m", "--mask"]:
            label = None
            if "=" in arg:
                label, arg = arg.split("=", 1)
            output_set(arg, label=label, parser=maskset2bits, **opts_output)
        elif opt in ["-p", "--parser"]:
            if arg.lower() == "list":
                opt_parser = listset2bits
            elif arg.lower() == "mask":
                opt_parser = maskset2bits
            else:
                error("invalid --parser=%s, expected one of: list, mask" % (arg,))
        elif opt in ["-r", "--raw"]:
            opts_output["raw"] = True
        elif opt in ["-g", "--group", "--group-one", "--group-zero"]:
            opts_output["mode"] = "group"
            if opt in ["--group-one"]:
                opts_group["files"] = 1
            if opt in ["--group-zero"]:
                opts_group["files"] = 0
        elif opt in ["--short"]:
            opts_output["short"] = True
        elif opt in ["-i", "--ignore-empty"]:
            opts_output["ignore_empty"] = True
        elif opt in ["-U", "--union"]:
            opt_operations.append("union")
        elif opt in ["-I", "--intersection"]:
            opt_operations.append("intersection")
        elif opt in ["-D", "--difference"]:
            opt_operations.append("difference")
        elif opt in ["-C", "--count"]:
            opt_operations.append(("count", int(arg)))
        else:
            error("internal error: unhandled option '%s'" % (opt,))

    for fname in remainder:
        if fname == "-":
            for lineidx, line in enumerate(sys.stdin.readlines()):
                data = line.replace("\x00", "").strip()
                if len(data) == 0:
                    continue
                if opt_column is None:
                    output_set(data, label="<stdin>:%d" % (lineidx+1,), parser=opt_parser, **opts_output)
                else:
                    col = 0
                    for nows, ws in re.findall(r'(\S+)|(\s*)', data):
                        if nows != "":
                            col += 1
                            output(nows)
                            if col == opt_column:
                                output_set(nows, label="", parser=opt_parser, **opts_output)
                        output(ws)
                    output("\n")
        else:
            if ">|" in fname:
                fname, syscmd = fname.split(">|", 1)
                data = subprocess.check_output(syscmd, shell=True, input=open(fname, "rb").read()).strip().decode("utf8")
            else:
                data = open(fname).read()
                data = data.replace("\x00", "").strip()
            output_set(data, label=fname, parser=opt_parser, **opts_output)

    for operation in opt_operations:
        output_operation(operation, **opts_output)

    if opts_output.get("mode", "") == "group":
        output_group(**opts_group)
