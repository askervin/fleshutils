#!/usr/bin/env python3
#
# Copyright (c) 2025 Antti Kervinen <antti.kervinen@gmail.com>
#
# License (MIT):
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""topotop - visualize CPU usage in NUMA nodes/packages/hyperthreads

Usage: topotop [options]

Options:
  -h, --help            print help.
  -d, --delay SECONDS   delay between updates. The default is "1.0".
"""

import glob
import os
import subprocess
import sys
import time

# error prints error message and exits process
def error(msg, exit_status=1):
    sys.stderr.write("topotop: %s\n" % (msg,))
    sys.exit(exit_status)

# listset2list parses list set syntax (like "0,4-7,63") into a list
def listset2list(s):
    l = []
    if s == "":
        return l
    for comma in s.split(","):
        rng = comma.split("-")
        if len(rng) == 1:
            l.append(int(rng[0]))
            continue
        for i in range(int(rng[0]), int(rng[1])+1):
            l.append(i)
    return l

# coord2brbit maps (x, y) coordinates to offset bits in utf8/braille
# defined for width x height: 2 x 4
coord2brbit = [
    [0, 1, 2, 6],
    [3, 4, 5, 7],
]

# brbits2chr converts braille character bits to a braille character
def brbits2chr(bits):
    base = 10240
    offset = 0
    for bit in range(8):
        if bits & (1 << bit) != 0:
            offset += 1 << bit
    return chr(base + offset)

class Bitmap:
    def __init__(self, width=0, height=0, data=None):
        self._width = width
        self._height = height
        self._data = data
        self._max_color = 1
    # from_table() creates bitmap from table
    # [[x0y0, x1y0, ...],
    #  [x0y1, x1y1, ...],
    #  ...]
    def from_netpbm(self, bmdata):
        magic, size, data = bmdata.split(b'\n', 2)
        width = int(size.split()[0])
        height = int(size.split()[1])
        array = []
        if magic == b"P1":
            for c in data:
                if c == b"0":
                    array.append(0)
                elif c == b"1":
                    array.append(1)
        elif magic == b"P2":
            array.extend([int(col) for col in data.split()])
        elif magic == b"P3":
            max_color, data = data.split(b'\n', 1)
            if max_color != b"255":
                raise Exception("only 8-bit (256 shades of gray) P5 images supported, got %s" % (max_color,))
            self._max_color=255
            rgbdata = [int(i) for i in data.split()]
            for i in range(width * height):
                r, g, b = rgbdata[i*3:i*3+3]
                array.append((r<<16) + (g<<8) + b)
        elif magic == b"P4":
            x = 0
            for c in data:
                for b in range(8):
                    if x >= width:
                        break
                    x += 1
                    array.append((c >> (7-b)) & 1)
                if x >= width:
                    x = 0
            array = array[0:width*height]
        elif magic == b"P5":
            max_color, data = data.split(b'\n', 1)
            if max_color != b"255":
                raise Exception("only 8-bit (256 shades of gray) P5 images supported, got %s" % (max_color,))
            self._max_color=255
            array.extend(data[0:width*height])
        elif magic == b"P6":
            max_color, data = data.split(b'\n', 1)
            if max_color != b"255":
                raise Exception("only 8-bit (256 color) P6 images supported, got %s" % (max_color,))
            self._max_color=255
            for i in range(width * height):
                r, g, b = data[i*3:i*3+3]
                array.append((r<<16) + (g<<8) + b)
        else:
            raise Exception("invalid PBM/PGM/PNM magic, expected P1, P2, P3, P4 or P6")
        self._max_color = max(self._max_color, max(array))
        self.from_array(width, height, array)
    def from_table(self, table):
        self._data = table
        self._height = len(self._data)
        self._width = max([len(line) for line in self._data])
        for row in self._data:
            self._max_color = max(self._max_color, max(row))
    def from_array(self, width, height, array):
        self._width = width
        self._height = height
        self._data = [[] for n in range(self._height)]
        for n, pixel in enumerate(array):
            self._data[n // self._width].append(pixel)
        self._max_color = max(array)
    def set_line(self, lineno, linedata):
        if self._data is None:
            self._data = []
        if lineno == -1:
            lineno = len(self._data)
        if lineno >= len(self._data):
            [self._data.append([]) for n in range(lineno-len(self._data)+1)]
        self._data[lineno] = linedata
        if len(linedata) > self._width:
            self._width = len(linedata)
        self._height = len(self._data)
        if len(linedata) > 0:
            self._max_color = max(self._max_color, max(linedata))
    def add_col(self, coldata):
        if self._data is None:
            self._data = []
        if len(self._data) < len(coldata):
            [self._data.append([]) for n in range(len(coldata)-len(self._data))]
        for lineidx, line in enumerate(self._data):
            line.append(coldata[lineidx])
        self._width = len(self._data[0])
        self._height = len(self._data)
    def line(self, lineno):
        if self._data and lineno < len(self._data):
            return self._data[lineno]
        return []
    def size(self):
        return (self._width, self._height)
    def set_size(self, width=None, height=None):
        if not width is None:
            self._width = width
        if not height is None:
            self._height = height
    def max_color(self):
        return self._max_color
    def pixel(self, x, y, default=None):
        if y >= len(self._data) or x >= len(self._data[y]):
            return default
        return self._data[y][x]
    # to_braille() converts a bitmap into a string of braille
    # characters. If bitmap height > 4 the result will be a
    # multiline string.
    def to_braille(self, colormode=0):
        width, height = self.size()
        max_color = self.max_color()
        if width == 0 or height == 0:
            return ""
        braille = []
        for row in range((3+height)//4):
            braille.append([])
        for x2 in range((1+width)//2):
            for y4 in range((3+height)//4):
                braille_char_bits = 0
                pixel_count = 0
                color_sum = 0
                if colormode == 2:
                    color_sum = (0, 0, 0)
                for x in range(min(2, width - x2*2)):
                    for y in range(min(4, height - y4*4)):
                        c = self.pixel(x2*2+x, y4*4+y, default=0)
                        if c != 0:
                            braille_char_bits |= 1 << coord2brbit[x][y]
                            pixel_count += 1
                            if colormode == 1: # grayscale
                                color_sum += c
                            elif colormode == 2: # 8-bit RGB
                                r, g, b = c >> 16, c >> 8 & 255, c & 255
                                color_sum = (color_sum[0] + b, color_sum[1] + g, color_sum[2] + r)
                color, nocolor = "", ""
                if colormode == 1 and pixel_count > 0 and max_color > 0:
                    grayscale = 232 + int(15 * (color_sum / pixel_count) / max_color)
                    color = "\x1b[38;5;%dm" % (grayscale,)
                    nocolor = "\x1b[0m"
                elif colormode == 2 and pixel_count > 0:
                    r = int(color_sum[2]/pixel_count)
                    g = int(color_sum[1]/pixel_count)
                    b = int(color_sum[0]/pixel_count)
                    color = "\x1b[38;2;%d;%d;%dm" % (r, g, b)
                    nocolor = "\x1b[0m"
                braille[y4].append(color + brbits2chr(braille_char_bits) + nocolor)
        return '\n'.join(''.join(c for c in line) for line in braille)

def cpu_usage():
    """Read CPU usage statistics from /proc/stat"""
    total, idle = {}, {}
    with open("/proc/stat") as f:
        for line in f:
            if line.startswith("cpu") and line[3] in "0123456789":
                fields = line.split()
                vcpu = int(fields[0][3:])
                values = list(map(int, fields[1:]))  # Convert to integers
                total[vcpu] = sum(values)  # Total time
                idle[vcpu] = values[3]  # Idle time (4th column)
    return total, idle

_pcm_process = None
_pcm_csv_headers = [] # expect two lines
def membw_from_pcm():
    global _pcm_process
    global _pcm_csv_headers
    if _pcm_process is None:
        _pcm_process = subprocess.Popen(
            ["stdbuf", "-oL", "pcm-memory", "-csv", "%.2f" % (opt_delay,)],
            bufsize=1,
            universal_newlines=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL)
        _pcm_csv_headers.append([f.strip() for f in _pcm_process.stdout.readline().strip().split(",")])
        if len(_pcm_csv_headers[0]) <= 4:
            raise Exception("failed to launch pcm-memory")
        _pcm_csv_headers.append([f.strip() for f in _pcm_process.stdout.readline().strip().split(",")])
    # get latest output from pcm-memory
    h0, h1 = _pcm_csv_headers[0], _pcm_csv_headers[1]
    line = _pcm_process.stdout.readline().strip()
    skt_chn_mbs = []
    for col, field in enumerate(line.split(",")):
        if not field:
            continue
        try:
            field_float = float(field.strip())
        except:
            continue
        if h0[col].startswith("SKT"):
            skt_chn_mbs.append(
                (int(h0[col][len("SKT"):]),
                 h1[col],
                 field_float))
    return skt_chn_mbs

def read_topology():
    cpus = []
    id_files=["physical_package_id", "die_id", "cluster_id", "core_id"]
    vcpu = lambda s: int(s[len("/sys/devices/system/cpu/cpu"):-len("/topology")])
    def readi(path):
        try:
            return int(open(path).read())
        except:
            return 0
    for d in glob.glob("/sys/devices/system/cpu/cpu*/topology"):
        cpus.append([readi(d + "/" + f) for f in id_files] + [vcpu(d)])
    cpus.sort()
    return cpus

def add_numa_info_to_pkg(cpus):
    nodeid = lambda s: int(s[len("/sys/devices/system/node/node"):-len("/cpulist")])
    cpu_node = {}
    for d in glob.glob("/sys/devices/system/node/node*/cpulist"):
        cpulist = listset2list(open(d).read())
        for cpuid in cpulist:
            cpu_node[cpuid] = nodeid(d)
    for cpu_vec in cpus:
        cpuid = cpu_vec[-1]
        cpu_vec[0:0] = [cpu_node.get(cpuid, "?")] # add NUMA node id to beginning

_cpu_load_total, _cpu_load_idle = cpu_usage()
def print_cpu_load(cpus):
    global _cpu_load_total, _cpu_load_idle
    total1, idle1 = _cpu_load_total, _cpu_load_idle
    total2, idle2 = cpu_usage()
    _cpu_load_total, _cpu_load_idle = total2, idle2

    try:
        width = os.get_terminal_size().columns
    except:
        width = 72

    pkgs = sorted(set("node%s@pkg%s" % (cpu[0], cpu[1]) for cpu in cpus))
    titlefmt = ""
    for pkg in pkgs:
        titlefmt += f"%-{width//len(pkgs)}s"
    title = titlefmt % tuple(pkgs)
    print(title)

    bm = Bitmap()
    max_usage = 2*int(width/len(pkgs))-4
    line = 0
    title = " " * (max_usage//2)
    pkg_prev = cpus[-1][0]
    for topocpu in cpus:
        pkg = topocpu[0]
        if pkg != pkg_prev:
            line = 0
            pkg_prev = pkg
        cpu = topocpu[-1]
        try:
            usage = round(max_usage * (1-(idle2[cpu]-idle1[cpu]) / (total2[cpu]-total1[cpu])))
        except ZeroDivisionError:
            usage = 0
        linedata = [1]*(usage) + [0]*(max_usage-usage)
        prev_col = bm.line(line)
        if prev_col:
            prev_col.extend([0]*4)
        bm.set_line(line, prev_col + linedata)
        line += 1
    print(bm.to_braille())

_width_bw = 0
_pkg_ch_max_read_bw, _pkg_ch_max_write_bw, _pkg_ch_max_bw = {}, {}, {}
_pkg_max_sum_read_bw, _pkg_max_sum_write_bw = {}, {}
def print_membw_usage(pkg, data):
    global _width_bw, _pkg_ch_max_read_bw, _pkg_ch_max_write_bw, _pkg_ch_max_bw
    global _max_sum_read_bw, _max_sum_write_bw
    if pkg not in _pkg_ch_max_read_bw:
        _pkg_ch_max_read_bw[pkg] = {}
        _pkg_ch_max_write_bw[pkg] = {}
        _pkg_ch_max_bw[pkg] = {}
        _pkg_max_sum_read_bw[pkg] = 0
        _pkg_max_sum_write_bw[pkg] = 0
    _ch_max_read_bw = _pkg_ch_max_read_bw[pkg]
    _ch_max_write_bw = _pkg_ch_max_write_bw[pkg]
    _ch_max_bw = _pkg_ch_max_bw[pkg]
    _max_sum_read_bw = _pkg_max_sum_read_bw[pkg]
    _max_sum_write_bw = _pkg_max_sum_write_bw[pkg]
    bm_width = 25*2
    lines = []
    ch_rw = {} # {channel: (readMBps, writeMBps)}
    for skt, metric, value in data:
        if skt != pkg:
            continue
        if metric.startswith("Ch"):
            gbps = value/1000.0
            if metric.endswith("Read"):
                ch = int(metric[len("Ch"):-len("Read")])
                ch_rw[ch] = (gbps, ch_rw.get(ch, (0, 0))[1])
                if gbps > _ch_max_read_bw.get(ch, 0):
                    _ch_max_read_bw[ch] = gbps
            elif metric.endswith("Write"):
                ch = int(metric[len("Ch"):-len("Write")])
                ch_rw[ch] = (ch_rw.get(ch, (0, 0))[0], gbps)
                if gbps > _ch_max_write_bw.get(ch, 0):
                    _ch_max_write_bw[ch] = gbps
    max_read_bw = max(rw[0] for rw in ch_rw.values())
    sum_read_bw = sum(rw[0] for rw in ch_rw.values())
    max_write_bw = max(rw[1] for rw in ch_rw.values())
    sum_write_bw = sum(rw[1] for rw in ch_rw.values())
    width_bw = max(max_read_bw, max_write_bw)
    if width_bw > _width_bw:
        _width_bw = width_bw
    if sum_read_bw > _max_sum_read_bw:
        _max_sum_read_bw = sum_read_bw
        _pkg_max_sum_read_bw[pkg] = sum_read_bw
    if sum_write_bw > _max_sum_write_bw:
        _max_sum_write_bw = sum_write_bw
        _pkg_max_sum_write_bw[pkg] = sum_write_bw
    print(f" skt{pkg}R {sum_read_bw:6.1f} GB/s peak {_max_sum_read_bw:6.1f} GB/s peak/ch {max(_ch_max_read_bw.values()):6.1f} GB/s")
    print(f" skt{pkg}W {sum_write_bw:6.1f} GB/s peak {_max_sum_write_bw:6.1f} GB/s peak/ch {max(_ch_max_write_bw.values()):6.1f} GB/s")
    for ch in sorted(ch_rw.keys()):
        if _ch_max_bw.get(ch, 0) < sum(ch_rw[ch]):
            _ch_max_bw[ch] = sum(ch_rw[ch])
        read, write = ch_rw[ch]
        bm = Bitmap()
        read_line = [1]*int(bm_width * read / _width_bw) + [0]*(bm_width-int(bm_width * read / _width_bw))
        read_line[max(int(bm_width * _ch_max_read_bw[ch] / _width_bw)-1,0)] = 1
        write_line = [1]*int(bm_width * write / _width_bw) + [0]*(bm_width-int(bm_width * write / _width_bw))
        write_line[max(int(bm_width * _ch_max_write_bw[ch] / _width_bw)-1,0)] = 1
        bm.set_line(1, read_line)
        bm.set_line(3, write_line)

        lines.append(f"ch{ch}R+W {read+write:6.1f} GB/s" + bm.to_braille() + f" {_ch_max_bw[ch]:6.1f} GB/s")
    print("\n".join(lines))

_cpu_load_total, _cpu_load_idle = cpu_usage()
def print_cpu_load2(cpus):
    global _cpu_load_total, _cpu_load_idle
    total1, idle1 = _cpu_load_total, _cpu_load_idle
    total2, idle2 = cpu_usage()
    _cpu_load_total, _cpu_load_idle = total2, idle2

    try:
        width = os.get_terminal_size().columns
    except:
        width = 72

    height_pts = 8 # braille characters
    lines = []
    prev_pkg = None
    for node in sorted(set([cpu[0] for cpu in cpus])):
        line0 = []
        line1 = []
        line2 = []
        usage = []
        for cpu in cpus:
            if cpu[0] != node:
                continue
            if not line0:
                if cpu[1] != prev_pkg:
                    if prev_pkg is not None:
                        lines.append([""])
                    prev_pkg = cpu[1]
                line0.append(f" pkg{cpu[1]:2}")
                line1.append(f"node{cpu[0]:2}")
                line2.append(f"coreid")
            vcpu = cpu[-1]
            if total2[vcpu] == total1[vcpu]:
                usage.append(0)
            else:
                usage.append(round(height_pts * (1-(idle2[vcpu]-idle1[vcpu]) / (total2[vcpu]-total1[vcpu]))))
            if len(usage) == 2:
                bm = Bitmap()
                for u in usage:
                    coldata =  [0]*(height_pts-u) + [1]*u
                    bm.add_col(coldata)
                s = bm.to_braille()
                if cpu[-2] % 10 == 0:
                    # set foreground gray on every 10th core
                    bgon = "\x1b[48;5;14m"
                    bgoff = "\x1b[0m"
                else:
                    bgon = ""
                    bgoff = ""
                line0.append(bgon + (s.split("\n")[0]) + " " + bgoff)
                line1.append(bgon + (s.split("\n")[1]) + " " + bgoff)
                line2.append(bgon + (" " + str(cpu[-2]))[-2:] + bgoff)
                usage = []
        lines.append(line0)
        lines.append(line1)
        lines.append(line2)
    print("\n".join("".join(line) for line in lines))

if __name__ == "__main__":
    import getopt
    opt_delay = 1.0

    try:
        opts, remainder = getopt.gnu_getopt(
            sys.argv[1:], 'hd:',
            ['help', 'delay='])
    except Exception as e:
        error(str(e))
    for opt, arg in opts:
        if opt in ["-h", "--help"]:
            print(__doc__)
            sys.exit(0)
        elif opt in ["-d", "--delay"]:
            try:
                opt_delay = float(arg)
            except:
                error("invalid delay: %s" % (arg,))

    cpus = read_topology()
    add_numa_info_to_pkg(cpus)
    max_pkg = max([cpu[1] for cpu in cpus])
    print("starting pcm-memory")
    try:
        membw_from_pcm()
    except Exception as err:
        print("skip memory bandwidth: %s" % (err,))
        membw_from_pcm = lambda: time.sleep(opt_delay)

    # clear terminal
    print("\x1b[2J", end="")
    while True:
        membw_usage = membw_from_pcm()
        # move cursor to top left
        print("\x1b[H", end="")
        if membw_usage:
            print_membw_usage(0, membw_usage)
            print()

        print_cpu_load2(cpus)

        if membw_usage and max_pkg > 0:
            for pkg in range(1, max_pkg + 1):
                print()
                print_membw_usage(pkg, membw_usage)
