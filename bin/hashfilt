#!/usr/bin/env python3
#
# Copyright (c) 2022 Antti Kervinen <antti.kervinen@gmail.com>
#
# License (MIT):
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""hashfilt - simplify hashes into human-readable strings

Usage: hashfilt [options]

Options:
  -h, --help      print help.
  -f FORMAT       hash replacement extended* printf-style format:
                  The default format is "H%(hash_id)d". Variables:
                  - hash_id: natural number, number of identified hash
                  - hash: original hash
                  *supports %((<expression>))<specifier> format
  -l MINLENGTH    do not match hashes shorter than MINLENGTH bits.
  -u              unbuffered mode: slower throughput but smaller delays.

Examples:
  md5sum * | hashfilt
  crc32 * | hashfilt -f '<hash/%((len(hash)*4))db/%(hash_id)d>'
"""

import getopt
import re
import sys
import time

def nomatch_match(re_pattern, s):
    """iterate (non_matching_prefix_of_s, groupdict/None) of regexp in s"""
    _s = s
    m = re_pattern.search(_s)
    while m:
        yield _s[:m.start()], m.groupdict()
        _s = _s[m.end():]
        m = re_pattern.search(_s)
    yield _s, None

def parse_code_format(fmt):
    """returns (list_of_exec, no_code_fmt)"""
    list_of_exec = []
    no_code_fmt = []
    r = re.compile(r'%\(\((?P<expr>.*?)\)\)(?P<specifier>[diouxXeEfFgGcrsa])')
    for index, (before, d) in enumerate(nomatch_match(r, fmt)):
        no_code_fmt.append(before)
        if d is None:
            break
        var_name = "__exc_fmt_%d__" % (index,)
        list_of_exec.append(var_name + "=" + d['expr'])
        no_code_fmt.append("%(" + var_name + ")" + d['specifier'])
    return list_of_exec, "".join(no_code_fmt)

def unbuffered_xreadlines(fileobj):
    """like fileobj.xreadlines() but unbuffered"""
    ln = []
    while True:
        c = fileobj.read(1)
        if not c:
            if ln:
                yield "".join(ln)
            break
        ln.append(c)
        if c == "\n":
            yield "".join(ln)
            ln = []

if __name__ == "__main__":
    opt_hash = None
    opt_unbuffered = False
    opt_format = 'H%(hash_id)d'
    opt_execute = []
    opt_min_length = 32
    opts, remainder = getopt.gnu_getopt(
        sys.argv[1:], 'hf:l:u',
        ['help', 'format='])
    for opt, arg in opts:
        if opt in ["-h", "--help"]:
            print(__doc__)
            sys.exit(0)
        elif opt in ["-f", "--format"]:
            exc, fmt = parse_code_format(arg)
            opt_format = fmt
            opt_execute.extend(exc)
        elif opt in ["-l"]:
            opt_min_length = int(arg)
        elif opt in ["-u"]:
            opt_unbuffered = True
    opt_hash = "[0-9a-fA-F]{%d,}" % (opt_min_length / 4,)
    if opt_unbuffered:
        line_iter = unbuffered_xreadlines(sys.stdin)
    else:
        line_iter = sys.stdin
    hash_re = re.compile(opt_hash)
    seen_hashes = {}
    for line in line_iter:
        l = hash_re.findall(line)
        for hash_ in l:
            if not hash_ in seen_hashes:
                seen_hashes[hash_] = len(seen_hashes)
            fmt_vars = {
                'hash': hash_,
                'hash_id': seen_hashes[hash_]
            }
            for code in opt_execute:
                exec(code, fmt_vars)
            formatted = opt_format % fmt_vars
            line = line.replace(hash_, formatted)
        sys.stdout.write(line)
        if opt_unbuffered:
            sys.stdout.flush()
