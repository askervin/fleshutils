# k8bash ["Kate Bash"].
# Source me for using "NAMESPACE/POD/CTR" with wildcards instead of -n NS -c CTR pod/POD.

_k8bash_debug() {
    local level="$1"
    shift
    if [[ -n "$K8BASH_DEBUG" ]] || (( "$level" == "0" )); then
	if (( "$level" <= "1" )) || (( "$K8BASH_DEBUG" >= "$level" )); then
	    echo "debug: $@" >&2
	fi
    fi
}

_k8bash_run() {
    if [[ -n "$K8BASH_DRYRUN" ]] && (( "$K8BASH_DRYRUN" >= "1" )); then
	_k8bash_debug 0 "k8bash-run (dry): $@"
	return 0
    fi
    _k8bash_debug 1 "k8bash-run: $@"
    "$@"
}

_k8bash_pattern_to_re() {
    local pattern="$1"
    if [[ "$pattern" == "re:"* ]]; then
	pattern="${pattern#re:}"
    else
	# pattern is a wildcard, convert into regexp
	pattern=${pattern//\*/[^/]*}
	if [[ "$pattern" == "//*"* ]]; then # "//*CTR" is a shorthand for regexp ".*/.*/.*CTR"
	    pattern=".*/.*/.*${pattern#//*}"
	elif [[ "$pattern" == "//"* ]]; then # "//CTR" is a shorthand for regexp ".*/.*/CTR"
	    pattern=".*/.*/${pattern#//}"
	elif [[ "$pattern" == *"//"* ]]; then # NS//CTR" is a shorthand for regexp "NS/.*/CTR"
	    pattern=${pattern/\/\//\/.*\/}
	fi
    fi
    echo "$pattern"
    _k8bash_debug 3 "k8bash-pattern-to-re: $1 => $pattern"
}

_k8bash_re_findall() {
    local re=$(_k8bash_pattern_to_re "$1")
    local word
    local count=0
    shift
    for word in "$@"; do
	if grep -qE "$re" <<< "$word"; then
	    _k8bash_debug 2 "k8bash-re-findall: regexp \"$re\" matches \"$word\""
	    count=$(( count + 1 ))
	    if [[ -n "$_k8bash_find_max" ]] && (( "$count" > "$_k8bash_find_max" )); then
		echo "k8bash-re-findall: too many matches, exceeded max $_k8bash_find_max" >&2
		return 1
	    fi
	    echo "$word"
	else
	    _k8bash_debug 3 "k8bash-re-findall: regexp \"$re\" does not match \"$word\""
	fi
    done
    if [[ -n "$_k8bash_find_min" ]] && (( "$count" < "$_k8bash_find_min" )); then
	echo "k8bash-re-findall: too few matches, found $count while expected at least $_k8bash_find_min" >&2
	return 1
    fi
}

kcmatch() {
    local filter=""
    if [[ "$1" == "-r" ]]; then
	shift
	filter="| select(.status.phase == \"Running\")"
    fi
    local pattern="$1"
    _k8bash_re_findall "$pattern" $(kubectl get pods -A -o json | jq -r ".items[] $filter | \"\(.metadata.namespace)/\(.metadata.name)/\(.spec.containers[].name)\"")
}

kcmatch-c() {
    for ns_pod_ctr in $(kcmatch "$@"); do
	local ns_pod=${ns_pod_ctr%/*}
	local ctr=${ns_pod_ctr##*/}
	echo "-c $ctr $ns_pod"
    done
}

kcmatch-nc() {
    for ns_pod_ctr in $(kcmatch "$@"); do
	_k8bash-expand-nspodctr-nc "$ns_pod_ctr"
    done
}

kpmatch() {
    local filter=""
    if [[ "$1" == "-r" ]]; then
	shift
	filter="| select(.status.phase == \"Running\")"
    fi
    local pattern="$1"
    _k8bash_re_findall "$pattern" $(kubectl get pods -A -o json | jq -r ".items[] $filter | \"\(.metadata.namespace)/\(.metadata.name)\"")
}

kpmatch-n() {
    local ns_pod
    for ns_pod in $(kpmatch "$@"); do
	_k8bash-expand-nspod-n "$ns_pod"
    done
}

_k8bash-expand-nspodctr-nc() {
    local ns_pod_ctr="$1"
    local ns_pod=${ns_pod_ctr%/*}
    local ns=${ns_pod_ctr%%/*}
    local pod=${ns_pod#*/}
    local ctr=${ns_pod_ctr##*/}
    echo "-n $ns -c $ctr pod/$pod"
}

_k8bash-expand-nspod-n() {
    local ns_pod="$1"
    local ns=${ns_pod%/*}
    local pod=${ns_pod#*/}
    echo "-n $ns $pod"
}

_k8bash_exactly_one() {
    _k8bash_find_min=1 _k8bash_find_max=1 "$@"
}

_k8bash_at_least_one() {
    _k8bash_find_min=1 _k8bash_find_max="" "$@"
}

_k8bash_pipe() {
    local output
    output=$("$@") || return 1
    echo "$output"
}

k8bash-export-svc() {
    source <(kubectl get services | grep -v CLUSTER-IP | sed -e 's/-/_/g' -e 's:/: :g' | awk '{print "svc_"$1"="$3":"$5}')
}

kubectl-describe() {
    if [[ "$1" == "pod" ]]; then
	shift
	local pattern="$1"
	shift
	_k8bash_pipe _k8bash_exactly_one kpmatch "$pattern" | while read ns_pod; do
            _k8bash_run kubectl describe pod $(_k8bash-expand-nspod-n "$ns_pod") "$@"
	done
    elif [[ "$1" == "pods" ]]; then
	shift
	local pattern="$1"
	shift
	_k8bash_pipe _k8bash_at_least_one kpmatch "$pattern" | while read ns_pod; do
            _k8bash_run kubectl describe pod $(_k8bash-expand-nspod-n "$ns_pod") "$@"
	done
    else
	_k8bash_run kubectl describe "$@"
    fi
}

kubectl-exec() {
    local pattern="$1"
    shift
    _k8bash_run kubectl exec -it $(kcmatch-nc -r "$pattern") "$@"
}

kubectl-get() {
    if [[ "$1" == "pod" ]]; then
	shift
	local pattern="$1"
	shift
	_k8bash_pipe _k8bash_exactly_one kpmatch "$pattern" | while read ns_pod; do
            _k8bash_run kubectl get pod $(_k8bash-expand-nspod-n "$ns_pod") "$@"
	done
    elif [[ "$1" == "pods" ]]; then
	shift
	local pattern="$1"
	shift
	_k8bash_pipe _k8bash_at_least_one kpmatch "$pattern" | while read ns_pod; do
            _k8bash_run kubectl get pod $(_k8bash-expand-nspod-n "$ns_pod") "$@"
	done
    else
	_k8bash_run kubectl get "$@"
    fi
}

kubectl-cp() {
    local args=""
    for argspec in "$@"; do
	if [[ "$argspec" == *":"* ]]; then
	    local ctrpattern=${argspec%%:*}
	    local podpathpattern=${argspec#*:}
	    local ctr=$(kcmatch-c -r "$ctrpattern")
	    if [[ -z "$ctr" ]]; then
		echo "kubectl-cp: no containers matching \"$argspec\"" >&2
		return 1
	    fi
	    local podpath=$(_k8bash_run kubectl exec $(kcmatch-nc $ctrpattern) -- sh -c "echo $podpathpattern")
	    args+=" $ctr:$podpath"
	else
	    args+=" $argspec"
	fi
    done
    _k8bash_run kubectl cp $args
}

kubectl-logs() {
    local pattern="$1"
    shift
    _k8bash_pipe _k8bash_at_least_one kcmatch "$pattern" | while read ns_pod_ctr; do
        _k8bash_run kubectl logs $(_k8bash-expand-nspodctr-nc "$ns_pod_ctr") "$@"
    done
}

kubectl-delete() {
    if [[ "$1" == "pod" ]]; then
	shift
	local pattern="$1"
	shift
	_k8bash_pipe _k8bash_exactly_one kpmatch "$pattern" | while read ns_pod; do
            _k8bash_run kubectl delete pod $(_k8bash-expand-nspod-n "$ns_pod") "$@"
	done
    elif [[ "$1" == "pods" ]]; then
	shift
	local pattern="$1"
	shift
	_k8bash_pipe _k8bash_at_least_one kpmatch "$pattern" | while read ns_pod; do
            _k8bash_run kubectl delete pod $(_k8bash-expand-nspod-n "$ns_pod") "$@"
	done
    else
	_k8bash_run kubectl delete "$@"
    fi
}
